package day07;

public class Collection01 {

	public static void main(String[] args) {
		/* 컬렉션 프레임워크 : 표준화된 방식의 자료구조
		 * List, Set, Map => 인터페이스, 반드시 구현 클래스로 객체를 생성
		 * 데이터를 묶어서 관리할 때 사용
		 * 주로 배열 대신 사용
		 * 
		 * List(배열과 동일)
		 * - 값을 하나씩 저장
		 * - index : 순서를 보장
		 * - 중복 허용
		 * - 배열 대신에 가장 많이 사용하는 구조
		 * 
		 * Set
		 * - 값을 하나씩 저장
		 * - index가 없음 : 순서를 보장하지 않음.
		 * - 중복 허용되지 않음.(같은 값이 입력되면 덮어씀.)
		 * 
		 * Map
		 * - 값을 두개씩 저장 key/value 쌍으로 저장
		 * - index는 없고, key가 index 역할을 함.
		 * - key는 중복 불가능 / value는 중복 가능
		 * - key가 중복되면 value는 덮어써짐.
		 * - 2개의 값이 하나의 자료로 묶여야 할 때 사용.
		 * - 아이디/패스워드, 제품명/가격, 학생명/점수
		 * 
		 * 배열은 기본자료형
		 * int arr[], double arr[], String arr[], Student arr[] 다 가능.
		 * 
		 * Collection은 기본자료형은 불가능. 클래스 자료형만 가능.
		 * 래퍼클래스(wrapper Class) : 기본 타입의 자료형을 클래스 타입으로 변환한 클래스.
		 * 기본자료형 (Boxing) > 클래스자료형
		 * 클래스자료형 (unBoxing)> 기본자료형
		 * 
		 * 기본자료형	>  래퍼클래스
		 * int 		>  Integer
		 * char		>  Character
		 * byte		>  Byte
		 * short	>  Shot
		 * long		>  Long
		 * float	>  Float
		 * double	>  Double
		 * boolean	>  Boolean
		 */

		int num = 10;
		Integer boxNum = 20; // 자동 박싱 
		int a = boxNum; // 자동 언박싱
		
		System.out.println(boxNum);
		System.out.println(a);
		
		// 클래스.parse+기본타입명 = 형변환 가능.
		String str = "10";
		int i = Integer.parseInt(str);
		System.out.println(i);
	}

}
